buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
}

dependencies {

    compile("org.springframework.boot:spring-boot-starter-data-rest") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile("org.springframework.boot:spring-boot-starter-data-jpa") 

	//compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: '2.0.2.RELEASE'

    //compile("org.springframework.data:spring-data-gemfire")
    compile("org.projectlombok:lombok")
 	compile("com.h2database:h2")
    compile("org.springframework.shell:spring-shell:1.2.0.RELEASE")

    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
}

defaultTasks 'jar'

jar {
	enabled = true
    baseName = 'recipe'
    destinationDir = file('install')
    from fileTree(dir: 'src/main/resource')
}

task "create-dirs" << {
    sourceSets*.java.srcDirs*.each{
        it.mkdirs()
    }
    sourceSets*.resources.srcDirs*.each{
        it.mkdirs()
    }
}

task buildJar(type:Jar) {
    baseName = 'recipe'
    version =  '0.1.0'
    destinationDir = file('install')
	manifest { 
		attributes (
			"Implementation-Title": project.name,
	        "Implementation-Version": '1.0.0',
	        "Built-Date": new Date(),
			'Main-Class': 'com.food.recipe.Application',
			"Class-Path": configurations.compileClasspath.collect { "lib/" + it.getName() }.join(' '))
	} 
} 

task clear(type: Delete) { 
	delete 'install/' 
} 

task copyJar(type: Copy) { 
	from configurations.runtime 
	into('install/lib') 
} 

task release1(type: Copy, dependsOn: [jar])
